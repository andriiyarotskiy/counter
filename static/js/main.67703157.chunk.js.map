{"version":3,"sources":["Button.tsx","Tablo.tsx","state/countReducer.ts","App.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["Button","props","className","disableAction","disabled","onClick","funcOnClick","width","height","viewBox","points","name","Tablo","error","style","color","errorMessage","message","enterValueMessage","incError","count","incValue","resetValue","resetError","initialState","countValue","countReducer","state","action","type","minValue","App","useSelector","dispatch","useDispatch","useState","disSetBtn","setDisSetBtn","disIncBtn","setIncError","disResBtn","setDisResBtn","setError","setErrorMessage","setMessage","setEnterValueMessage","maxValue","setMaxValue","startValue","setStartValue","inputMode","pattern","value","onChange","e","start","Number","currentTarget","max","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"qPA6BeA,G,MArBA,SAACC,GACZ,OACI,oCACI,yBAAKC,UAAU,UACX,yBAAKA,UAAWD,EAAME,cAAgB,oBAAsB,UACxD,4BAAQD,UAAWD,EAAME,cAAgB,kBAAoB,MACrDC,SAAUH,EAAME,cAChBE,QAASJ,EAAMK,aACnB,yBAAKC,MAAM,QAAQC,OAAO,OAAOC,QAAQ,aACpCP,UAAU,UACX,8BAAUQ,OAAO,8BAA8BR,UAAU,YACzD,8BAAUQ,OAAO,8BAA8BR,UAAU,aAE7D,8BAAOD,EAAMU,YCuBtBC,EA7BD,SAACX,GAEX,OACI,yBAAKC,UAAU,SACVD,EAAMY,MACD,wBAAIC,MAAO,CAACC,MAAO,QAASd,EAAMe,cAClCf,EAAMgB,QACF,4BAAKhB,EAAMiB,mBACX,wBAAIhB,UAAWD,EAAMkB,SAAW,WAAY,aAAclB,EAAMmB,OAC1E,yBAAKlB,UAAU,cACX,yBAAKA,UAAU,qBACX,kBAAC,EAAD,CACII,YAAaL,EAAMoB,SACnBlB,cAAeF,EAAMkB,SACrBR,KAAM,SAEd,yBAAKT,UAAU,qBACX,kBAAC,EAAD,CACII,YAAaL,EAAMqB,WACnBnB,cAAeF,EAAMsB,WACrBZ,KAAM,c,cC9B1Ba,EAAe,CACfC,WAAY,GAqBDC,EAlBM,WAAqF,IAApFC,EAAmF,uDAAzDH,EAAcI,EAA2C,uCACrG,OAAQA,EAAOC,MACX,IAAK,YACD,OAAO,eAAIF,EAAX,CAAkBF,WAAYE,EAAMF,WAAW,IACnD,IAAK,gBACD,OAAO,eAAIE,EAAX,CAAkBF,WAAYG,EAAOE,WACzC,QACI,OAAOH,IC8HJI,MAtIf,WAMI,IAAMX,EAAQY,aAAsC,SAAAL,GAAK,OAAIA,EAAMP,MAAMK,cACnEQ,EAAWC,cAPN,EASqBC,oBAAkB,GATvC,mBASNC,EATM,KASKC,EATL,OAUoBF,oBAAkB,GAVtC,mBAUNG,EAVM,KAUKC,EAVL,OAWqBJ,oBAAkB,GAXvC,mBAWNK,EAXM,KAWKC,EAXL,OAaaN,oBAAkB,GAb/B,mBAaNtB,EAbM,KAaC6B,EAbD,OAc2BP,mBAAiB,IAd5C,mBAcNnB,EAdM,KAcQ2B,EAdR,OAeiBR,oBAAkB,GAfnC,mBAeNlB,EAfM,KAeG2B,EAfH,OAgBqCT,mBAAiB,IAhBtD,mBAgBNjB,EAhBM,KAgBa2B,EAhBb,OAkBmBV,mBAAS,GAlB5B,mBAkBNW,EAlBM,KAkBIC,EAlBJ,OAmBuBZ,mBAAS,GAnBhC,mBAmBNa,EAnBM,KAmBMC,EAnBN,KA0EL3B,EAAa,WACfe,GAAa,GAEbO,GAAW,GACXL,GAAY,GACZE,GAAa,GACbR,EDjE4C,CAChDJ,KAAM,gBAAiBC,SCgEIkB,KAG3B,OACI,yBAAK9C,UAAU,OACX,yBAAKA,UAAU,aACX,uCACA,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,kBACX,mCACA,2BACIA,UAAU,QACV2B,KAAK,OACLqB,UAAU,UACVC,QAAQ,yBACRC,MAAOJ,EACPK,SAjEC,SAACC,GACtB,IAAIC,EAAQC,OAAOF,EAAEG,cAAcL,OAC/BG,GAAST,GAAYS,EAAQ,GAC7Bb,GAAS,GACTC,EAAgB,mBAEhBJ,GAAY,GACZF,GAAa,GACbI,GAAa,GACbG,GAAW,KAEXA,GAAW,GACXC,EAAqB,gCAErBN,GAAY,GACZF,GAAa,GACbI,GAAa,GAEbC,GAAS,IAEbO,EAAcM,OAgDF,yBAAKrD,UAAU,kBACX,mCACA,2BACIA,UAAU,QACV2B,KAAK,OACLqB,UAAU,UACVC,QAAQ,yBACRC,MAAON,EACPO,SArDD,SAACC,GACpB,IAAII,EAAMF,OAAOF,EAAEG,cAAcL,OAC7BM,GAAOV,GAAcA,EAAa,GAClCN,GAAS,GACTH,GAAY,GACZF,GAAa,GACbI,GAAa,GACbE,EAAgB,mBAChBC,GAAW,KAEXA,GAAW,GACXC,EAAqB,gCACrBH,GAAS,GACTH,GAAY,GACZF,GAAa,GACbI,GAAa,IAEjBM,EAAYW,QAwCJ,yBAAKxD,UAAU,mBACX,kBAAC,EAAD,CACII,YAAagB,EACbnB,cAAeiC,EACfzB,KAAM,SAGd,kBAAC,EAAD,CACIU,SAjGC,WACTD,EAAQ0B,GACRb,EDZsB,CAC9BJ,KAAM,cCaGiB,EAAW,IAAO1B,GACnBmB,GAAY,IA6FJjB,WAAYA,EACZF,MAAOA,EACPP,MAAOA,EACPG,aAAcA,EACdC,QAASA,EACTC,kBAAmBA,EACnBC,SAAUmB,EACVf,WAAYiB,OC3HZmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCdAC,EAAcC,YAAgB,CAChC7C,MAAQM,IAGCwC,EAAQC,YAAYH,GCAjCI,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,QAGRK,SAASC,eAAe,SF6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlE,GACLmE,QAAQnE,MAAMA,EAAMI,c","file":"static/js/main.67703157.chunk.js","sourcesContent":["import React from 'react'\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    funcOnClick?: () => void\r\n    disableAction: boolean\r\n}\r\n\r\nconst Button = (props: ButtonType) => {\r\n    return (\r\n        <>\r\n            <div className=\"button\">\r\n                <div className={props.disableAction ? \"center disableSVG\" : \"center\"}>\r\n                    <button className={props.disableAction ? \"btn disabledBtn\" : \"btn\"}\r\n                            disabled={props.disableAction}\r\n                            onClick={props.funcOnClick}>\r\n                        <svg width=\"180px\" height=\"60px\" viewBox=\"0 0 180 60\"\r\n                             className=\"border\">\r\n                            <polyline points=\"179,1 179,59 1,59 1,1 179,1\" className=\"bg-line\"/>\r\n                            <polyline points=\"179,1 179,59 1,59 1,1 179,1\" className=\"hl-line\"/>\r\n                        </svg>\r\n                        <span>{props.name}</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport Button from \"./Button\";\r\n\r\nexport type TabloType = {\r\n    incValue: () => void\r\n    resetValue: () => void\r\n    count: number\r\n    error: boolean\r\n    errorMessage: string\r\n    message: boolean\r\n    enterValueMessage: string\r\n    incError: boolean\r\n    resetError: boolean\r\n}\r\n\r\nconst Tablo = (props: TabloType) => {\r\n\r\n    return (\r\n        <div className='tablo'>\r\n            {props.error\r\n                ? <h2 style={{color: 'red'}}>{props.errorMessage}</h2>\r\n                : props.message\r\n                    ? <h2>{props.enterValueMessage}</h2>\r\n                    : <h2 className={props.incError ? 'redCount': 'blueCount'}>{props.count}</h2>}\r\n            <div className='buttomWrap'>\r\n                <div className='tablo__btn incBtn'>\r\n                    <Button\r\n                        funcOnClick={props.incValue}\r\n                        disableAction={props.incError}\r\n                        name={'INC'}/>\r\n                </div>\r\n                <div className='tablo__btn resBtn'>\r\n                    <Button\r\n                        funcOnClick={props.resetValue}\r\n                        disableAction={props.resetError}\r\n                        name={'RESET'}/>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tablo","type InitialStateType = typeof initialState\r\ntype ActionsTypes =\r\n    ReturnType<typeof incrementAC>\r\n    | ReturnType<typeof setMinValueAC>\r\n\r\nlet initialState = {\r\n    countValue: 0\r\n}\r\n\r\nconst countReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return {...state, countValue: state.countValue+1}\r\n        case 'SET-MIN-VALUE':\r\n            return {...state, countValue: action.minValue}\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incrementAC = () => ({\r\n    type: 'INCREMENT'\r\n} as const)\r\nexport const setMinValueAC = (minValue: number) => ({\r\n    type: 'SET-MIN-VALUE', minValue\r\n} as const)\r\n\r\nexport default countReducer;","import React, {ChangeEvent, useState} from 'react';\r\nimport './App.css';\r\nimport Button from \"./Button\";\r\nimport Tablo from \"./Tablo\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {incrementAC, setMinValueAC} from \"./state/countReducer\";\r\n\r\nfunction App() {\r\n    // Пока вводим сообщение должны быть задизейблены кнопки INC и Reset и сообщение нажать кнопку Set\r\n    // Если Старт и Макс равны или Макс меньше Старт все кнопки задизейблены и сообщение об ошибке,\r\n    //подсветка инпутов во время ошибки\r\n    // После нажатия Set она дизейблится до начала ввода нового значение\r\n\r\n    const count = useSelector<AppRootStateType, number>(state => state.count.countValue)\r\n    const dispatch = useDispatch()\r\n\r\n    let [disSetBtn, setDisSetBtn] = useState<boolean>(true) // Дизайбл кнопки SET\r\n    let [disIncBtn, setIncError] = useState<boolean>(true) // Дизайбл кнопки INC\r\n    let [disResBtn, setDisResBtn] = useState<boolean>(true) // Дизайбл кнопки RESET\r\n\r\n    let [error, setError] = useState<boolean>(false)\r\n    let [errorMessage, setErrorMessage] = useState<string>('') // Error Message\r\n    let [message, setMessage] = useState<boolean>(false)\r\n    let [enterValueMessage, setEnterValueMessage] = useState<string>('')\r\n\r\n    let [maxValue, setMaxValue] = useState(0) // inputMax handler\r\n    let [startValue, setStartValue] = useState(0) // inputMin handler\r\n\r\n\r\n    const incValue = () => {\r\n        if (count < maxValue) {\r\n            dispatch(incrementAC())\r\n        }\r\n        if ((maxValue - 1) === count) {\r\n            setIncError(true)\r\n        }\r\n    }\r\n\r\n    const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let start = Number(e.currentTarget.value)\r\n        if (start >= maxValue || start < 0) {\r\n            setError(true)\r\n            setErrorMessage('Incorrect value')\r\n\r\n            setIncError(true) // disable INC\r\n            setDisSetBtn(true) // disable SET\r\n            setDisResBtn(true) // disable RESET\r\n            setMessage(false)\r\n        } else {\r\n            setMessage(true)\r\n            setEnterValueMessage(\"enter values and press 'set'\")\r\n\r\n            setIncError(false)\r\n            setDisSetBtn(false)\r\n            setDisResBtn(false)\r\n\r\n            setError(false)\r\n        }\r\n        setStartValue(start)\r\n    }\r\n\r\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let max = Number(e.currentTarget.value)\r\n        if (max <= startValue || startValue < 0) {\r\n            setError(true)\r\n            setIncError(true)\r\n            setDisSetBtn(true)\r\n            setDisResBtn(true)\r\n            setErrorMessage('Incorrect value')\r\n            setMessage(false)\r\n        } else {\r\n            setMessage(true)\r\n            setEnterValueMessage(\"Enter values and press 'SET'\")\r\n            setError(false)\r\n            setIncError(false)\r\n            setDisSetBtn(false)\r\n            setDisResBtn(false)\r\n        }\r\n        setMaxValue(max)\r\n    }\r\n\r\n    const resetValue = () => {\r\n        setDisSetBtn(true)\r\n\r\n        setMessage(false)\r\n        setIncError(false)\r\n        setDisResBtn(false)\r\n        dispatch(setMinValueAC(startValue))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className='Container'>\r\n                <h1>Counter</h1>\r\n                <div className=\"inputContainer\">\r\n                    <div className='input_minValue'>\r\n                        <h2>Min</h2>\r\n                        <input\r\n                            className='input'\r\n                            type=\"text\"\r\n                            inputMode=\"numeric\"\r\n                            pattern=\"[-+]?[0-9]*[.,]?[0-9]+\"\r\n                            value={startValue}\r\n                            onChange={changeStartValue}\r\n                        />\r\n                    </div>\r\n                    <div className='input_maxValue'>\r\n                        <h2>Max</h2>\r\n                        <input\r\n                            className='input'\r\n                            type=\"text\"\r\n                            inputMode=\"numeric\"\r\n                            pattern=\"[-+]?[0-9]*[.,]?[0-9]+\"\r\n                            value={maxValue}\r\n                            onChange={changeMaxValue}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className='setBtnContainer'>\r\n                    <Button\r\n                        funcOnClick={resetValue}\r\n                        disableAction={disSetBtn}\r\n                        name={'SET'}\r\n                    />\r\n                </div>\r\n                <Tablo\r\n                    incValue={incValue}\r\n                    resetValue={resetValue}\r\n                    count={count}\r\n                    error={error}\r\n                    errorMessage={errorMessage}\r\n                    message={message}\r\n                    enterValueMessage={enterValueMessage}\r\n                    incError={disIncBtn}\r\n                    resetError={disResBtn}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport countReducer from \"./countReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    count : countReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}